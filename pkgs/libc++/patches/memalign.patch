--- src/libcxx/include/__memory/aligned_alloc.h.orig
+++ src/libcxx/include/__memory/aligned_alloc.h
@@ -42,10 +42,11 @@
   // max() ternary to the actual call site to avoid succeeded in that case.
   return ::aligned_alloc(__alignment, __size > __rounded_size ? __size : __rounded_size);
 #  else
-  void* __result = nullptr;
-  (void)::posix_memalign(&__result, __alignment, __size);
-  // If posix_memalign fails, __result is unmodified so we still return `nullptr`.
-  return __result;
+  char* __ptr = (char *)::malloc(__size + __alignment + sizeof(void *));
+  char* __result = __ptr + sizeof(void *);
+  __result = (char *)(((size_t)__result + __alignment - 1) & ~(__alignment - 1));
+  ((char **)__result)[-1] = __ptr;
+  return (void *)__result;
 #  endif
 }
 
@@ -53,7 +54,7 @@
 #  if defined(_LIBCPP_MSVCRT_LIKE)
   ::_aligned_free(__ptr);
 #  else
-  ::free(__ptr);
+  ::free(((void **)__ptr)[-1]);
 #  endif
 }
 
