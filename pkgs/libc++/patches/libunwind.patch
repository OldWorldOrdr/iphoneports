--- src/libunwind/src/AddressSpace.hpp.orig
+++ src/libunwind/src/AddressSpace.hpp
@@ -53,6 +53,7 @@
 #endif
 
 #ifdef __APPLE__
+#include <mach-o/getsect.h>
 
   struct dyld_unwind_sections
   {
@@ -62,9 +63,43 @@
     const void*                 compact_unwind_section;
     uintptr_t                   compact_unwind_section_length;
   };
+  #if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) \
+                                 && (__MAC_OS_X_VERSION_MIN_REQUIRED >= 1070)) \
+      || defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
+    // In 10.7.0 or later, libSystem.dylib implements this function.
+    extern "C" bool _dyld_find_unwind_sections(void *, dyld_unwind_sections *);
+  #else
+    // In 10.6.x and earlier, we need to implement this functionality. Note
+    // that this requires a newer version of libmacho (from cctools) than is
+    // present in libSystem on 10.6.x (for getsectiondata).
+    static inline bool _dyld_find_unwind_sections(void* addr,
+                                                    dyld_unwind_sections* info) {
+      // Find mach-o image containing address.
+      Dl_info dlinfo;
+      if (!dladdr(addr, &dlinfo))
+        return false;
+#ifdef __LP64__
+      const struct mach_header_64 *mh = (const struct mach_header_64 *)dlinfo.dli_fbase;
+#else
+      const struct mach_header *mh = (const struct mach_header *)dlinfo.dli_fbase;
+#endif
+
+      // Initialize the return struct
+      info->mh = (const struct mach_header *)mh;
+      info->dwarf_section = getsectiondata(mh, "__TEXT", "__eh_frame", &info->dwarf_section_length);
+      info->compact_unwind_section = getsectiondata(mh, "__TEXT", "__unwind_info", &info->compact_unwind_section_length);
+
+      if (!info->dwarf_section) {
+        info->dwarf_section_length = 0;
+      }
+
+      if (!info->compact_unwind_section) {
+        info->compact_unwind_section_length = 0;
+      }
 
-  // In 10.7.0 or later, libSystem.dylib implements this function.
-  extern "C" bool _dyld_find_unwind_sections(void *, dyld_unwind_sections *);
+      return true;
+    }
+  #endif
 
 namespace libunwind {
   bool findDynamicUnwindSections(void *, unw_dynamic_unwind_sections *);
