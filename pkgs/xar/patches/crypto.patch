--- src/xar/lib/archive.h.orig
+++ src/xar/lib/archive.h
@@ -40,7 +40,7 @@
 #define _XAR_ARCHIVE_H_
 #include <zlib.h>
 #include <libxml/hash.h>
-#ifdef __APPLE__
+#if 0
 #include <CommonCrypto/CommonDigest.h>
 #include <CommonCrypto/CommonDigestSPI.h>
 #else
--- src/xar/lib/hash.c.orig
+++ src/xar/lib/hash.c
@@ -41,7 +41,7 @@
 #include <string.h>
 #include <sys/types.h>
 #include <zlib.h>
-#ifdef __APPLE__
+#if 0
 #include <CommonCrypto/CommonDigest.h>
 #include <CommonCrypto/CommonDigestSPI.h>
 #else
@@ -58,7 +58,7 @@
 
 #pragma mark Hash Wrapper Object
 
-#ifdef __APPLE__
+#if 0
 
 CCDigestRef digestRef_from_name(const char* name, unsigned int *outHashSize) {
     CCDigestRef result = NULL;
@@ -94,10 +94,10 @@
 struct __xar_hash_t {
 	const char *digest_name;
 	void *context;
-#ifdef __APPLE__
+#if 0
 	CCDigestRef digest;
 #else
-	EVP_MD_CTX digest;
+	EVP_MD_CTX *digest;
 	const EVP_MD *type;
 #endif
 	unsigned int length;
@@ -113,12 +113,13 @@
 	if( context )
 		HASH_CTX(hash)->context = context;
 	
-#ifdef __APPLE__
+#if 0
 	HASH_CTX(hash)->digest = digestRef_from_name(digest_name, &HASH_CTX(hash)->length);
 #else
 	OpenSSL_add_all_digests();
 	HASH_CTX(hash)->type = EVP_get_digestbyname(digest_name);
-	EVP_DigestInit(&HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
+	HASH_CTX(hash)->digest = EVP_MD_CTX_create();
+	EVP_DigestInit(HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
 #endif
 	
 	HASH_CTX(hash)->digest_name = strdup(digest_name);
@@ -135,15 +136,15 @@
 }
 
 void xar_hash_update(xar_hash_t hash, void *buffer, size_t nbyte) {
-#ifdef __APPLE__
+#if 0
 	CCDigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
 #else
-	EVP_DigestUpdate(&HASH_CTX(hash)->digest, buffer, nbyte);
+	EVP_DigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
 #endif
 }
 
 void *xar_hash_finish(xar_hash_t hash, size_t *nbyte) {
-#ifdef __APPLE__
+#if 0
 	void *buffer = calloc(1, CC_SHA512_DIGEST_LENGTH); // current biggest digest size  This is what OpenSSL uses
 #else
 	void *buffer = calloc(1, EVP_MAX_MD_SIZE);
@@ -151,11 +152,12 @@
 	if( ! buffer )
 		return NULL;
 	
-#ifdef __APPLE__
+#if 0
 	CCDigestFinal(HASH_CTX(hash)->digest, buffer);
 	CCDigestDestroy(HASH_CTX(hash)->digest);
 #else
-	EVP_DigestFinal(&HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
+	EVP_DigestFinal(HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
+	EVP_MD_CTX_destroy(HASH_CTX(hash)->digest);
 #endif
 	
 	*nbyte = HASH_CTX(hash)->length;
