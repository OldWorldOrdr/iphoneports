--- source/ex.c.orig
+++ source/ex.c
@@ -399,6 +399,8 @@ static int ec_edit(const char *loc, char *cmd, char *arg)
 			return 1;
 	if (!(path = ex_pathexpand(arg, 0)))
 		return 1;
+	if (!loc)
+		goto ret;
 	if (path[0] && ((fd = bufs_find(path)) >= 0)) {
 		bufs_switchwft(fd)
 		free(path);
@@ -408,12 +410,26 @@ static int ec_edit(const char *loc, char *cmd, char *arg)
 	readfile(rd =)
 	ex_bufpostfix(ex_buf - bufs);
 	syn_setft(ex_buf->ft);
+	ret:
 	snprintf(msg, sizeof(msg), "\"%s\"  %d lines  [r]",
 			*ex_path ? ex_path : "unnamed", lbuf_len(xb));
 	if (rd)
 		ex_show("read failed");
 	else
 		ex_show(msg);
+	if (lbuf_len(xb) > 0) {
+		int adv = 0;
+		while (lbuf_len(xb) >= adv && lbuf_buf(xb)[adv][0] == '\n')
+			adv++;
+		char *langs[] = {"/bin/sh", "/usr/bin/sh", "/usr/bin/env sh", "/bin/bash", "/usr/bin/bash", "/usr/bin/env bash", "/bin/dash", "/usr/bin/dash", "/usr/bin/env dash", "/bin/python", "/usr/bin/python", "/usr/bin/env python"};
+		char *types[] = {"sh", "sh", "sh", "sh", "sh", "sh", "sh", "sh", "sh", "py", "py", "py"};
+		for (int i = 0; i < LEN(langs); i++) {
+			if (strstr(lbuf_buf(xb)[adv], langs[i])) {
+				strcpy(ex_buf->ft, types[i]);
+				syn_setft(ex_buf->ft);
+			}
+		}
+	}
 	free(path);
 	return 0;
 }
@@ -1147,6 +1163,10 @@ int ex_init(char **files)
 		return 1;
 	if (getenv("EXINIT"))
 		ex_command(getenv("EXINIT"));
+	if (stdin_fd) {
+		lbuf_rd(xb, STDIN_FILENO, 0, lbuf_len(xb));
+		ec_edit(NULL, "e!", "");
+	}
 	return 0;
 }
 
--- source/term.c.orig
+++ source/term.c
@@ -5,6 +5,7 @@
 
 sbuf *term_sbuf;
 int term_record;
+int stdin_fd;
 static int rows, cols;
 static struct termios termios;
 
@@ -13,16 +14,16 @@ void term_init(void)
 	struct winsize win;
 	struct termios newtermios;
 	sbufn_make(term_sbuf, 2048)
-	tcgetattr(0, &termios);
+	tcgetattr(stdin_fd, &termios);
 	newtermios = termios;
 	newtermios.c_lflag &= ~(ICANON | ISIG);
 	newtermios.c_lflag &= ~ECHO;
-	tcsetattr(0, TCSAFLUSH, &newtermios);
+	tcsetattr(stdin_fd, TCSAFLUSH, &newtermios);
 	if (getenv("LINES"))
 		rows = atoi(getenv("LINES"));
 	if (getenv("COLUMNS"))
 		cols = atoi(getenv("COLUMNS"));
-	if (!ioctl(0, TIOCGWINSZ, &win)) {
+	if (!ioctl(stdin_fd, TIOCGWINSZ, &win)) {
 		cols = win.ws_col;
 		rows = win.ws_row;
 	}
@@ -138,12 +139,12 @@ int term_read(void)
 	struct pollfd ufds[1];
 	int n;
 	if (ibuf_pos >= ibuf_cnt) {
-		ufds[0].fd = STDIN_FILENO;
+		ufds[0].fd = stdin_fd;
 		ufds[0].events = POLLIN;
 		if (poll(ufds, 1, -1) <= 0)
 			return -1;
 		/* read a single input character */
-		if ((n = read(STDIN_FILENO, ibuf, 1)) <= 0)
+		if ((n = read(stdin_fd, ibuf, 1)) <= 0)
 			return -1;
 		ibuf_cnt = n;
 		ibuf_pos = 0;
@@ -319,7 +320,7 @@ char *cmd_pipe(char *cmd, char *ibuf, int iproc, int oproc)
 	close(fds[1].fd);
 	waitpid(pid, NULL, 0);
 	signal(SIGTTOU, SIG_IGN);
-	tcsetpgrp(STDIN_FILENO, getpid());
+	tcsetpgrp(stdin_fd, getpid());
 	signal(SIGTTOU, SIG_DFL);
 	if (!iproc) {
 		term_init();
--- source/vi.c.orig
+++ source/vi.c
@@ -2138,10 +2138,12 @@ int main(int argc, char *argv[])
 	for (i = 1; i < argc && argv[i][0] == '-'; i++) {
 		if (argv[i][1] == 's')
 			xled = 0;
-		if (argv[i][1] == 'e')
+		else if (argv[i][1] == 'e')
 			xvis = 0;
-		if (argv[i][1] == 'v')
+		else if (argv[i][1] == 'v')
 			xvis = 1;
+		else
+			stdin_fd = open(ctermid(NULL), O_RDONLY);
 	}
 	if (xled || xvis)
 		term_init();
--- source/vi.h.orig
+++ source/vi.h
@@ -33,6 +33,7 @@ extern int fspos;
 extern int fscount;
 extern int vi_hidch;
 extern int vi_insmov;
+extern int stdin_fd;
 
 #endif
